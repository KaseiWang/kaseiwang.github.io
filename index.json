[{"content":"\n[Anbox](http://anbox.io)(Android in a box) 是一个在 LXC 容器中运行完整 Andoird 的项目。这是一篇在 ArchLinux 上安装使用 Anbox 的踩坑笔记。\n### 安装\n安装 [AUR/anbox-git](https://aur.archlinux.org/pkgbase/anbox-git/)、[AUR/anbox-modules-dkms-git](https://aur.archlinux.org/packages/anbox-modules-dkms-git/)、[AUR/anbox-image](https://aur.archlinux.org/packages/anbox-image) 及其依赖。\n也可以在 \u003chttps://build.kasei.im/\u003e 下载作者编译的二进制包。\n### Anbox container manager\n``` shell\nsudo systemctl start anbox-container-manager.service\n```\n1. Anbox 利用 lxc 管理容器，所以首先确保你的 lxc 能够使用。可以利用 lxc-checkconfig 命令检查。\n2. lxc 配置文件在 /var/lib/anbox/containers/default/config。\n3. lxc 日志在 /var/lib/anbox/logs/container.log。\n\n### 网络配置\n感谢 [zhsj](https://zhsj.me/) 老师的提示。Anbox 依赖网桥 anboxbr0 联网。在原始的 snap 发行版本中依赖一个脚本 [anbox-bridge.sh](https://github.com/anbox/anbox/blob/master/scripts/anbox-bridge.sh) 进行配置。AUR/anbox-git 没有打包这个脚本。可以在 Arch 上使用这个脚本，也可以手动配置。如果使用上游的配置脚本，dnsmasq 的部分会出问题，可以删除脚本中的相应部分，随后手动配置 DHCP。\n### Anbox session manager\n``` shell\nsystemctl --user restart anbox-session-manager.service\n# 如需查看调试信息\nANBOX_LOG_LEVEL=debug anbox session-manager\n```\n1. 作者在 HD4000/i5-3230m(mesa 17.0.3) 上无法启动，但在 GT740M(nvidia 378.13) 上可以使用。怀疑与 GL 版本有关。\n``` shell\n# HD4000/i5-3230m(mesa 17.0.3)\nOpenGL core profile version string: 3.3 (Core Profile) Mesa 17.0.3\nOpenGL core profile shading language version string: 3.30\nOpenGL ES profile version string: OpenGL ES 3.0 Mesa 17.0.3\nOpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.00\n# GT740M(nvidia 378.13)\nOpenGL core profile version string: 4.5.0 NVIDIA 378.13\nOpenGL core profile shading language version string: 4.50 NVIDIA\nOpenGL ES profile version string: OpenGL ES 3.2 NVIDIA 378.13\nOpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20\n```\n2. 有人称加上 --gles-driver=host 可以解决一些问题。Anbox 在 nvidia 上会强制使用这个参数。\n\n### 开始使用\n``` shell\nanbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity\n```\n### 体验\n1. 没有 ARM 指令翻译，需要 native 库的软件均需要安装 x86 版本。\n2. 系统自带应用（时钟、计算器、文件等）都能正常工作。\n3. 大部分应用（chrome、QQ浏览器、星尘浏览器）无法正常工作。\n4. 感觉离实用还很远。\n","cover":"","link":"2017/04/anbox-on-archlinux.html","preview":"\u003cp\u003eAnbox(Android in a box) 是一个在 LXC 容器中运行完整 Andoird 的项目。这是一篇在 ArchLinux 上安装使用 Anbox 的踩坑笔记。\u003c/p\u003e\n","title":"在 ArchLinux 上安装 Anbox"},{"content":"\n[snapper](http://snapper.io) 是一个由 openSUSE 开发的 Btrfs/LVM 快照管理软件。它可以自动创建和清理快照序列，在快照之间进行比较，回滚到之前的快照等，能够帮助我们充分利用 btrfs 的高级特性。  \n[2017-03-15] 作者翻译了一下 ArchWiki 的[相关页面](https://wiki.archlinux.org/index.php/Snapper_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))，欢迎查阅。\n### 安装\nArchLinux 用户安装 community/snapper 即可。 AUR/snapper-gui-git 提供了一个非官方 GUI 界面，可以选择性安装。\n``` shell\nsudo pacman -S snapper\nyaourt -S snapper-gui-git\n```\nsnapper 工作在 btrfs 上时，以 btrfs 子卷(subvolume)为操作单位。因此在使用 snapper 以前，你必须已经创建好 btrfs 子卷。合理将你的文件分散到不同子卷中会带来很大便利。\n### 创建配置文件\n首先需要为 snapper 要管理的 btrfs subvolume 创建配置文件，执行以下命令将根据默认配置模板 /etc/snapper/config-templates/default 创建一个配置文件。\n``` shell\nsnapper -c configname create-config /path/to/subvolume\n# examples\nsnapper -c arch_rootfs create-config /\nsnapper -c home create-config /home\n```\n默认配置文件包括以下内容，更多内容可以 man snapper-configs 查看。\n``` shell\n# 要创建快照的子卷\nSUBVOLUME=\"/\"\n\n# 文件系统类型\nFSTYPE=\"btrfs\"\n\n\n# 清理算法将使用的 btrfs qgroup，用于空间配额限制，仅用于 btrfs\nQGROUP=\"\"\n\n\n# 快照占用的总空间限制，0.5 = 50%\nSPACE_LIMIT=\"0.5\"\n\n\n# 允许访问该配置的用户和用户组，其他用户无法使用 snapper 操作该配置文件及对应快照\nALLOW_USERS=\"\"\nALLOW_GROUPS=\"\"\n\n# 是否将以上的被允许用户和用户组写入到快照的ACL以允许他们访问快照\n# 只有能够访问快照的用户才能进行查看、比较等操作\n# 快照只能由 root 用户拥有，并且不能对其他用户可写\nSYNC_ACL=\"no\"\n\n\n# 后台自动创建后续快照后是否比较前后快照\nBACKGROUND_COMPARISON=\"yes\"\n\n\n# 是否运行基于数量的清理算法\nNUMBER_CLEANUP=\"yes\"\n\n# 基于数量清理使用的参数\n# 允许清理的最小快照创建时间，单位为秒\nNUMBER_MIN_AGE=\"1800\"\n# 保留的快照数目，多余快照将被清理，优先保留新快照\nNUMBER_LIMIT=\"50\"\n# 保留的重要快照数目\nNUMBER_LIMIT_IMPORTANT=\"10\"\n\n\n# 是否创建每小时快照\nTIMELINE_CREATE=\"yes\"\n\n# 是否运行基于时间的清理算法\nTIMELINE_CLEANUP=\"yes\"\n\n# 基于时间清理使用的参数\n# 允许清理的最小快照创建时间，单位为秒\nTIMELINE_MIN_AGE=\"1800\"\n# 保留的每小时快照数量，以下同\nTIMELINE_LIMIT_HOURLY=\"10\"\n# 每日快照为每天创建的第一个快照，以下同\nTIMELINE_LIMIT_DAILY=\"10\"\nTIMELINE_LIMIT_WEEKLY=\"0\"\nTIMELINE_LIMIT_MONTHLY=\"10\"\nTIMELINE_LIMIT_YEARLY=\"10\"\n\n\n# 是否清理前后无变动的快照\nEMPTY_PRE_POST_CLEANUP=\"yes\"\n\n# 清理前后无变动快照时的限制参数\nEMPTY_PRE_POST_MIN_AGE=\"1800\"\n```\n### 启动定时器\n要使用 systemd timer 运行 snapper。启动并启用 snapper-timeline.timer 来启用自动创建快照功能。启动并启用 napper-cleanup.timer 来启用自动清理功能。\n```shell\nsystemctl enable --now snapper-timeline.timer\nsystemctl enable --now snapper-cleanup.timer\n```\n### 查看快照\n```shell\nsnapper -c configname list\n# example\nsnapper -c home list\n# output\n类型 | # | 前期 # | 日期                                      | 用户 | 清空   | 描述   | 用户数据\n-------+---+----------+---------------------------------------------+--------+----------+----------+-------------\nsingle | 0 |          |                                             | root   |          | current  |             \nsingle | 1 |          | 2017年03月14日 星期二 17时27分56秒 | root   | timeline | timeline |             \nsingle | 2 |          | 2017年03月14日 星期二 20时00分57秒 | root   | timeline | timeline |             \nsingle | 3 |          | 2017年03月14日 星期二 21时00分52秒 | root   | timeline | timeline |            \n```\n### 比较快照\n```shell\nsnapper -c configname status number1..number2\n# example\nsnapper -c home status 1..3\n```\n### 回滚快照\n```shell\nsnapper -c configname rollback [number]\n```\n1. 不带 number 参数时。将为默认子卷创建一个只读快照，再为当前子卷创建一个读写快照，并将默认子卷设置为后者。\n2. 带 number 参数时。将为当前子卷创建一个只读快照，再为指定 number 的快照创建一个读写快照，并将默认子卷设置为后者。\n\n### 删除快照\n```shell\nsnapper -c configname delete number1\nsnapper -c configname delete number1..number2\n# example\nsnapper -c home delete 1\nsnapper -c home delete 1..3\n```\n### 比较文件内容\n```shell\nsnapper -c configname diff number1..number2 [filename]\n# example\nsnapper -c home diff 1..3 ~/.z\n```\n### 回滚文件内容\n```shell\nsnapper -c configname undochange number1..number2 [filename]\n# example\nsnapper -c home undochange 1..3 ~/.z\n```\n","cover":"","link":"2017/03/use-snapper-for-btrfs-snapshot-and-backup.html","preview":"\u003cp\u003esnapper 是一个由 openSUSE 开发的 Btrfs/LVM 快照管理软件。它可以自动创建和清理快照序列，在快照之间进行比较，回滚到之前的快照等，能够帮助我们充分利用 btrfs 的高级特性。\u003c/p\u003e\n","title":"利用 Snapper 实现 btrfs 自动定时备份"},{"content":"\n我是 Kasei Wang，目前就读于电子科技大学通信与信息工程学院，ArchLinux CN 打包工。\n# 联系方式\n- Email: [kasei@kasei.im](mailto:kasei@kasei.im)\n- Telegram: [@kasei](https://telegram.me/kasei)\n- Github: [https://github.com/kaseiwang](https://github.com/kaseiwang)\n- Keybase: [https://keybase.io/kaseiwang](https://keybase.io/kaseiwang)\n- PGP: 7028 E1F3 20C4 5EE9 8473 B1C3 5F1B C1A1 BF2B 11D0\n","cover":"/images/avatar@big.png","link":"2017/02/about-me.html","preview":"","title":"关于我"}]